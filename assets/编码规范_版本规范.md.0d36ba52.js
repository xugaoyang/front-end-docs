import{_ as l,o as i,c as t,M as a}from"./chunks/framework.0a4b53e9.js";const u=JSON.parse('{"title":"版本规范","description":"","frontmatter":{},"headers":[],"relativePath":"编码规范/版本规范.md","filePath":"编码规范/版本规范.md"}'),n={name:"编码规范/版本规范.md"},o=a('<h1 id="版本规范" tabindex="-1">版本规范 <a class="header-anchor" href="#版本规范" aria-label="Permalink to &quot;版本规范&quot;">​</a></h1><h2 id="版本格式-major-minor-patch" tabindex="-1">版本格式(major.minor.patch) <a class="header-anchor" href="#版本格式-major-minor-patch" aria-label="Permalink to &quot;版本格式(major.minor.patch)&quot;">​</a></h2><ol><li>主版本号【新架构调整，不兼容老版本】</li><li>次版本号【新增功能,兼容老版本】</li><li>修订号【bug修复,兼容老版本】 映射到项目上即为：</li><li>主版本号【大型变更】</li><li>次版本号【功能新增】</li><li>修订号【bug修复】</li></ol><h2 id="版本说明" tabindex="-1">版本说明 <a class="header-anchor" href="#版本说明" aria-label="Permalink to &quot;版本说明&quot;">​</a></h2><ol><li>version：固定版本,1.0.0,即版本号只能为1.0.0</li><li>(&gt;)=version：大于或等于某个版本,&gt;=1.0.0,如1.0.0,1.0.1,...,1.0.n,1.2.n,...,1.n.n,...,2.n.n,...</li><li>(&lt;)=version：小于或等于某个版本,&lt;=1.0.0, 如1.0.0,0.1.1,...,0.0.n,...0.1.n,0.n.n</li><li><code>~version</code></li></ol><ul><li>大概匹配某个版本,~1.1.2，表示&gt;=1.1.2 &lt;1.2.0，如1.1.2,1.1.3,1.1.4,...,1.1.n</li><li>如果minor版本号指定了,那么minor版本号不变,而patch版本号任意,~1.1，表示&gt;=1.1.0 &lt;1.2.0</li><li>如果minor和patch版本号未指定,那么minor和patch版本号任意,~1，表示&gt;=1.0.0 &lt;2.0.0,如是1.0.0,1.0.1,1.0.2,...,1.0.n,1.1.n,1.2.n,...,1.n.n</li></ul><ol start="5"><li><code>^version</code></li></ol><ul><li>兼容某个版本,^1.1.2,表示&gt;=1.1.2 &lt;2.0.0,如是1.1.2,1.1.3,...,1.1.n,1.2.n,...,1.n.n</li><li>版本号中最左边的非0数字的右侧可以任意,^0.2.3,表示&gt;=0.2.3 &lt;0.3.0,如0.2.3,0.2.4,...,0.2.n</li><li>如果缺少某个版本号,则这个版本号的位置可以任意,^0.0,表示 &gt;=0.0.0 &lt;0.1.0,如0.0.0,0.0.1,...,0.0.n</li></ul>',8),e=[o];function r(c,s,_,h,d,m){return i(),t("div",null,e)}const f=l(n,[["render",r]]);export{u as __pageData,f as default};
